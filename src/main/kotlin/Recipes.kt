data class Recipe (val title: String,
                   val mainIngredient: String,
                   val isVegetarian: Boolean = false,
                   val difficulty: String = "Easy")

class Mushroom (val size: Int, val isMagic: Boolean){
    constructor(x: Boolean): this(0,x){

    }
}

fun findRecipes (title: String = "",
                 ingredient: String="",
                 isVegetarian: Boolean = false,
                 difficulty: String = ""): Array<Recipe>{
    return arrayOf(Recipe(title, ingredient, isVegetarian, difficulty))
}

//overloading a function
fun addNumbers (a: Int, b: Int): Int{
    return a + b
}

fun addNumbers (a: Double, b: Double): Double{
    return a + b
}

// Default parameters
// If class has no body, {} could be omitted.
// Every data class must have a primary construct, which must define at least one parameter.
// Each parameter must be prefixed with val or var.
// In data class, equals, hashCode and toString functions are overridden.
// Data class can't be declared as abstract or open.

fun main(){
    val r1 = Recipe ("Thai Curry", "Chicken")
    val r2 = Recipe (title = "Thai Curry", mainIngredient = "Chicken")
    val r3 = r1.copy(title = "Chicken Bhuna")
    println("r1 hash code: ${r1.hashCode()}")
    println("r2 hash code: ${r2.hashCode()}")
    println("r3 hash code: ${r3.hashCode()}")
    println("r1 toString: ${r1.toString()}")
    println("r1 == r2? ${r1 == r2}")
    println("r1 === r2? ${r1 === r2}")
    println("r1 == r3? ${r1 == r3}")
    val (x, y, z, v) = r1
    println("title is $x, mainIngredient is $y, vegetarian is $z and difficulty is $v")

// When implementations are generated by compiler, it only includes the properties defined in the primary constructor.

    /*val testR = Recipe ("Peking duck", false)
    testR.mainIngredient = "Chicken"
    val testR1 = Recipe("Peking duck", false)
    testR1.mainIngredient = "Duck"
    println("${testR == testR1}")*/

    //val mySpaghetti = Recipe ("Spaghetti Bolognese", "Beef")
    //passing values in order of declaration
    //val vegSpaghetti = Recipe("Spaghetti with vegetables", "Tofu", true, "Hard")
    //val mySpaghetti = Recipe (title = "Spaghetti Bolognese", mainIngredient = "Beef")
    //println("${mySpaghetti.toString()}")
    val m1 = Mushroom(6, false)
    println("m1 size is ${m1.size} and isMagic is ${m1.isMagic}")
    val m2 = Mushroom (true)
    println("m2 size is ${m2.size} and isMagic is ${m2.isMagic}")

    println (addNumbers(2,5))
    println(addNumbers(1.6, 7.3))

}